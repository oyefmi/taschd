package edu.udel.cis.taschd.gen;

/**
 * The Hungarian class is responsible for optimizing and making assignments between Sections and CA 
 * based on the score provided. 
 * It hides the details on the internal representation
 * 
 * 
 * @author nikhil
 */


public class Assign {
	private double[][] scores; // Given Scores
	private double[][] duplicateScores; // duplicate Scores
	private int[][] lines; // Line drawn
	private int numLines; // Number of line drawn
	
	private int assignment[]; // Index of the column assigned to every row
	private int assignedCol[]; //To Verify that all column are occupied
	
	public Assign(double[][] scoreTable) {
	
		this.scores = scoreTable; 
		this.duplicateScores = duplicateTable(scoreTable); 
		this.assignment = new int[duplicateScores.length];
		this.assignedCol = new int[duplicateScores.length];
		this.numLines = 0;
							
	}
	
	public void hungarian() {
		
		//Hungarian Algorithm
		subRowMax(); 				
		subColMax();				
		zerosCovered();						
		while(numLines < duplicateScores.length){
			createZeros();		
			zerosCovered();					
		}
		optimize(0);
	}
	
	/**
	 * 
	 * Subtract from every element the maximum value from its row
	 * */
	
	private void subRowMax(){
		double rowMax[] = new double[duplicateScores.length];
		//get the max for each row 
		for(int row=0; row<duplicateScores.length;row++){
			rowMax[row] = duplicateScores[row][0];
			for(int col=1; col<duplicateScores.length;col++){
				if(duplicateScores[row][col] > rowMax[row])
					rowMax[row] = duplicateScores[row][col];
			}
		}
		
		//subtract rowMax from each row 
		for(int row=0; row<duplicateScores.length;row++){
			for(int col=0; col<duplicateScores.length;col++){
				duplicateScores[row][col] -= rowMax[row];
			}
		}
	} 
	
	/**
	 * 
	 * Subtract from every element the maximum value from its column
	 * */
	private void subColMax(){
		double colMax[] = new double[duplicateScores.length];
		//get the max for each column 
		for(int col=0; col<duplicateScores.length;col++){
			colMax[col] = duplicateScores[0][col];
			for(int row=1; row<duplicateScores.length;row++){
				if(duplicateScores[row][col] > colMax[col])
					colMax[col] = duplicateScores[row][col];
			}
		}
		
		//subtract colMax from each row 
		for(int col=0; col<duplicateScores.length;col++){
			for(int row=0; row<duplicateScores.length;row++){
				duplicateScores[row][col] -= colMax[col];
			}
		}
	} 
	
	/**
	 * 
	 * Loop through all elements, and run colorNeighbors when the element visited is equal to zero
	 * */
	private void zerosCovered(){
		numLines = 0;
		lines = new int[duplicateScores.length][duplicateScores.length];
		
		for(int row=0; row<duplicateScores.length;row++){
			for(int col=0; col<duplicateScores.length;col++){
				if(duplicateScores[row][col] == 0)
					colorNeighbors(row, col, maxZeroDirection(row, col));
			}
		}
	}
	
	/**
	 * 
	 * Checks which direction (vertical,horizontal) contains more zeros, every time a zero is found vertically, we increment the result
	 * and every time a zero is found horizontally, we decrement the result. At the end, result will be negative, zero or positive
	 * @param row Row index for the target cell
	 * @param col Column index for the target cell
	 * @return Positive integer means that the line passing by indexes should be vertical, Zero or Negative means that the line passing by indexes should be horizontal
	 * */
	private int maxZeroDirection(int row, int col){
		int result = 0;
		for(int i=0; i<duplicateScores.length;i++){
			if(duplicateScores[i][col] == 0)
				result++;
			if(duplicateScores[row][i] == 0)
				result--;
		}
		return result;
	}
	
	/**
	 * 
	 * Color the neighbors of the cell. To know which direction to draw the lines, we pass maxZeroDirection value.
	 * @param row Row index for the target cell
	 * @param col Column index for the target cell
	 * @param maxZeroDirection Value return by the maxZeroDirection method
	 * */
	private void colorNeighbors(int row, int col, int maxZeroDirection){
		if(lines[row][col] == 2) // if cell is colored twice before, don't color it again
			return;
		
		if(maxZeroDirection > 0 && lines[row][col] == 1) // if cell colored vertically and needs to be recolored vertically, don't color it again 
			return;
			
		if(maxZeroDirection <= 0 && lines[row][col] == -1) // if cell colored horizontally and needs to be recolored horizontally, don't color it again 
			return;
		
		for(int i=0; i<duplicateScores.length;i++){ // Loop on cell at indexes and its neighbors
			if(maxZeroDirection > 0)	// if value of maxZeroDirection is positive, color vertically
				lines[i][col] = lines[i][col] == -1 || lines[i][col] == 2 ? 2 : 1; // if cell was colored before as horizontal (-1), and now needs to be colored vertical (1), so this cell is an intersection (2). Else if this value was not colored before, color it vertically
			else			// if value of maxZeroDirection is zero or negative color horizontally
				lines[row][i] = lines[row][i] == 1 || lines[row][i] == 2 ? 2 : -1; // if cell was colored before as vertical (1), and now needs to be colored horizontal (-1), so this cell is an intersection (2). Else if this value was not colored before, color it horizontally
		}
		
		// increment line number
		numLines++;

	}
	
	/**
	 * 
	 * 
	 * Create additional zeros, by coloring the maximum value of uncovered cells 
	 * */
	private void createZeros(){
		double maxUncovered = 0; 
		
		// Find the max in the uncovered numbers
		for(int row=0; row<duplicateScores.length;row++){
			for(int col=0; col<duplicateScores.length;col++){
				if(lines[row][col] == 0 && (duplicateScores[row][col] > maxUncovered || maxUncovered == 0))
					maxUncovered = duplicateScores[row][col];
			}
		}
		
		// Subtract max form all uncovered elements, and add it to all elements covered twice
		for(int row=0; row<duplicateScores.length;row++){
			for(int col=0; col<duplicateScores.length;col++){
				if(lines[row][col] == 0) 
					duplicateScores[row][col] -= maxUncovered;
				
				else if(lines[row][col] == 2) 
					duplicateScores[row][col] += maxUncovered;
			}
		}
	} 
	
	/**
	 * Optimize, assign every row a cell in a unique column. Since a row can contain more than one zero,
	 * we need to make sure that all rows are assigned one cell from one unique column. 
	 * @param row
	 * @param boolean If all rows were assigned a cell from a unique column, return true 
	 * @return true
	 * */
	private boolean optimize(int row){
		if(row == assignment.length) // If all rows were assigned a cell
			return true;
		
		for(int col=0; col<duplicateScores.length;col++){ 
			if(duplicateScores[row][col] == 0 && assignedCol[col] == 0){ // If the current cell has a value of zero, and the column assigned to previous row
				assignment[row] = col; // Assign the current row the current column
				assignedCol[col] = 1; // Mark the column as assigned
				if(optimize(row+1)) // If the next rows were assigned successfully a value from unique column, return true
					return true;
				assignedCol[col] = 0; // If the next rows were not able to get value, go back and try for the previous rows another value from another column
			}
		}
		return false; // If no cell were assigned for the current row, return false to go back one row to try to assign to it another value from another column
	}
	
	
	/**
	 * Get the result by returning an array containing the cell assigned for each row
	 * @return Array of rows where each array index represent the row number, and the value at each index is the column assigned to the corresponding row
	 * */
	public int[] getAssignment(){
		return assignment;
	}
	
	/**
	 * Get the sum of the values of the assigned cells
	 * @return sum of values
	 * */
	public double getOptimumAssignmentScore(){
		double total = 0;
		for(int row = 0; row < duplicateScores.length; row++)
			total += scores[row][assignment[row]];
		return total;
	}

	/**
	 * Clone the 2D array
	 * @return A copy of the 2D array
	 * */
	private double[][] duplicateTable(double[][] table){
		
		double[][] temp = new double[table.length][table.length];
		for(int row = 0; row < table.length; row++){
			temp[row] = table[row].clone();
		}
		return temp;
	}
	
	/**
	 * Print a 2D array
	 * @param table  2D array to be displayed
	 * */
	public void display(double[][] table){
		for(int row=0; row<table.length;row++){
			for(int col=0; col<table.length;col++){
				System.out.print(table[row][col]+"\t");
			}
			System.out.println();
		}
		System.out.println();
	}
}