package edu.udel.cis.taschd.userinterface;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import org.json.simple.parser.ParseException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import edu.udel.cis.taschd.ca.CourseAssistant;
import edu.udel.cis.taschd.ca.CourseAssistantPool;

//import edu.udel.cis.taschd.course.Course;

import edu.udel.cis.taschd.course.CourseInstance;
import edu.udel.cis.taschd.course.CourseInstancePool;
import edu.udel.cis.taschd.course.Section;
import edu.udel.cis.taschd.db.Database;
import edu.udel.cis.taschd.extract.CAScheduleExtractor;
import edu.udel.cis.taschd.extract.CourseScheduleExtractor;
import edu.udel.cis.taschd.gen.GenerateAssignment;
import edu.udel.cis.taschd.time.TimeInterval;
import edu.udel.cis.taschd.time.WeeklySchedule;

/**
 * 
 * @author Ankush Saini
 *         <p>
 * 
 *         The {@link UserInterface} class is the way a user interacts with
 *         taschd. It displays and stores details of the CA like the CA ID,
 *         term, CA's schedule, set of skills that the CA possesses. Course
 *         details like the Course ID, Course schedule, set of skills the course
 *         requires and also assignments of CAs to courses. Along with this, the
 *         user can add details to the db like term, new skill to the CA,new
 *         skill to the course. To access the Ui, the user requires a user name
 *         and password.
 *         </p>
 */

public class UserInterface {
	/**
	 * get Current directory of user
	 */
	static String directory = System.getProperty("user.dir");

	/**
	 * Initializes the default directory structure
	 * <p>
	 * command - taschd init redirects here
	 * </p>
	 * <p>
	 * Output - Create directory structure - taschd_dir with subfolders courses,
	 * ca_pool, terms
	 * </p>
	 * 
	 * @author sumeetgupta
	 */

	public void init() {
		File rootDir = new File(directory);
		// file name taschd_dir in current directory
		File taschdDirectory = new File(rootDir, "taschd_dir");
		try {
			// folder name courses in taschd_dir
			createDirectory(new File(taschdDirectory, "courses"));
			// folder name ca_pool in taschd_dir
			createDirectory(new File(taschdDirectory, "ca_pool"));
			// folder name terms in taschd_dir
			createDirectory(new File(taschdDirectory, "terms"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
		}
	}

	/**
	 * Method to check if a directory exists. If file does not exist, create it.
	 * <p>
	 * Used by init()
	 * </p>
	 * 
	 * @author sumeetgupta
	 * @param file
	 *            to create
	 * @return file
	 * @throws IOException
	 */
	public static File createDirectory(File file) throws IOException {
		// check if directory exists
		if (file.exists()) {
			return file;
		}
		// create directory if it doesn't already exist
		if (file.mkdirs()) {
			return file;
		}
		throw new IOException("Failed to create directory '" + file.getAbsolutePath() + "' for an unknown reason.");
	}

	/**
	 * Adds a new term to the directory
	 * 
	 * @author anksaini command - taschd addTerm redirects here
	 * 
	 * 
	 * @param term
	 *            Current term (eg. 2188, 2193)
	 * 
	 */

	public void addTerm(String term) {
		File rootDir = new File(directory);
		// file name taschd_dir in current directory
		File taschdDirectory = new File(rootDir, "taschd_dir");
		File terms = new File(taschdDirectory, "terms");
		File termDir = new File(terms, term);
		try {

			// file name courses in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "courses"));
			// file name assistants in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "assistants"));
			// file name assignments in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "assignments"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
		}

	}


	/**
	 * 
	 * @param source
	 *            Source of extraction (eg. Web)
	 * @param courseKey
	 *            departmentID/ courseID
	 * @param term
	 *            Current term (eg. 2188, 2193)
	 * @return Array list of CourseInstance
	 */

	// Method to get Course's schedule from webreg
	public ArrayList<CourseInstance> getCourseSchd(String source, String courseKey, String term) {
		System.out.println("Source = " + source + "CourseKey=" + courseKey + "Term=" + term);
		System.out.flush();
		CourseScheduleExtractor cse = new CourseScheduleExtractor(source, courseKey, term);
		ArrayList<CourseInstance> courseInst = cse.returnCourseInstances();
		return courseInst;
	}

	/**
	 * 
	 * @param source
	 *            Source of extraction (eg. Web)
	 * @param courseKey
	 * 
	 * @param term
	 *            Current term (eg. 2188, 2193)
	 * @throws IOException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 */

	// Method to get Course's schedule from webreg
	public void getCourseFromWebReg(String source, String courseKey, String term)
			throws JsonParseException, JsonMappingException, IOException {
		CourseScheduleExtractor cse = new CourseScheduleExtractor(source, courseKey, term);
		ArrayList<CourseInstance> courseInst = cse.returnCourseInstances();
		if (courseInst != null) {
			for (int i = 0; i < courseInst.size(); i++) {
				storeCourseToDatabase(courseInst.get(i));
			}
		} else
			System.out.println("No course found.");
	}

	// Method to store Course in database
	public static void storeCourseToDatabase(CourseInstance c)
			throws JsonParseException, JsonMappingException, IOException {
		Database dbo = new Database();
		dbo.store(c);
		dbo.storeDynamic(c);
	}

	/**
	 * 
	 * @param ca
	 *            CourseAssistant
	 * @param term
	 *            Current term (eg. 2188, 2193)
	 * @return file of CA stored statically and dynamically
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @throws NumberFormatException
	 * @throws JsonMappingException
	 * @throws JsonParseException
	 */

	// Method to store CA

	// TODO: add CA dynamically too. Only stores static file.

	// Method to get CA's schedule from webreg
	public void getCAFromWebReg(String source, String[] credentials, int[] CAIDs, String term)
			throws JsonParseException, JsonMappingException, NumberFormatException, IOException {
		CAScheduleExtractor cse = new CAScheduleExtractor(source, credentials, CAIDs, term);
		ArrayList<CourseAssistant> courseAssist = cse.returnCASchedules();
		if (courseAssist != null) {
			for (int i = 0; i < courseAssist.size(); i++) {
				storeCAToDatabase(courseAssist.get(i), Integer.parseInt(term));
			}
		} else
			System.out.println("No CA found for this term.");
	}

	public static void storeCAToDatabase(CourseAssistant ca, int term)
			throws JsonParseException, JsonMappingException, IOException {
		Database dbo = new Database();
		dbo.store(ca);
		dbo.storeDynamic(ca, term);
	}

	// Method to get CA By Id from database
	public CourseAssistant getCAbyIDFromDatabase(int caID, int termOfCA) 
			throws FileNotFoundException, IOException, ParseException {
		Database dbo = new Database();
		CourseAssistant ca = dbo.retrieveCAById(caID, termOfCA);
		return ca;
	}

	/**
	 * 
	 * @param code
	 *            The university course code, represented as a 3-digit String.
	 *            (Example: 675)
	 * @param term
	 *            Current term (eg. 2188, 2193)
	 * @return CourseInstance
	 * @throws ParseException 
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */

	// Method to get Course By code from database
	public CourseInstance getCourseByCodeFromDatabase(String prefix, String code, int term) 
			throws FileNotFoundException, IOException, ParseException {
		Database dbo = new Database();
		CourseInstance c = dbo.retrieveCourseByCode(prefix, code, term);
		return c;
	}

	/**
	 * 
	 * @param courseCode
	 *            The university course code, represented as a 3-digit String.
	 *            (Example: 675)
	 * @param term
	 *            Current term (eg. 2188, 2193)
	 * @return
	 * @throws ParseException 
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	// Method to get Course Schedule by Code from database
<<<<<<< .mine
	public WeeklySchedule getCourseSchdByCodeFromDatabase(String prefix, String code, int term) 
			throws FileNotFoundException, IOException, ParseException {
		Database dbo = new Database();
		CourseInstance c = dbo.retrieveCourseByCode(prefix, code, term);
		WeeklySchedule ws = c.getSections().iterator().next().getSchedule();
		return ws;
||||||| .r338
=======
	public void getCourseSchdByCodeFromDatabase(String prefix, String code, int term) {
		CourseInstance c = getCourseByCodeFromDatabase(prefix, code, term);
		TimeInterval ti = null;
		Iterator<Section> iterSec = c.getSections().iterator();
		while (iterSec.hasNext()) {
			Iterator<TimeInterval> iterTime = iterSec.next().getSchedule().getSchedule().iterator();
			System.out.println(c.getCourse().getPrefix()+c.getCourse().getCourseCode()+iterSec.next().getSectionNumber()+iterSec.next().getSectionType());
			while (iterTime.hasNext()) {
				ti = iterTime.next();
				System.out.println(ti.toString());
			}
		}
>>>>>>> .r342
	}

	// Method to get CA schedule by Id from database
	public void getCASchdByIDFromDatabase(int caID, int term) 
			throws FileNotFoundException, IOException, ParseException {
		CourseAssistant ca = getCAbyIDFromDatabase(caID, term);
		TimeInterval ti = null;
		Iterator<TimeInterval> iterTime = ca.getWtps().getSchedule().iterator();
		System.out.println(ca.getId());
		while (iterTime.hasNext()) {
			ti = iterTime.next();
			System.out.println(ti.toString());
		}
	}

	// Generates assignments & store to database
	public void genAssign(int term) throws FileNotFoundException, IOException, ParseException {
		Database dbo = new Database();
		CourseAssistantPool cap = dbo.retrieveCourseAssistantPool(term);
		CourseInstancePool cip = dbo.retrieveCourseInstancePool(term);
		GenerateAssignment ga = new GenerateAssignment(cap, cip);
		HashMap<Section, Iterable<CourseAssistant>> obj1 = ga.assign();
		dbo.store(obj1, term);
	}

	// Need to further split this method based on Ca, Assign, Time & Skill
	// modules

	public void display(int caID, int term, String prefix, String courseCode) 
			throws FileNotFoundException, IOException, ParseException {
		getCASchdByIDFromDatabase(caID, term);
		getCourseSchdByCodeFromDatabase(prefix, courseCode, term);
	}

	/**
	 * 
	 *
	 * This is the main method which is the primary way the user interacts with
	 * taschd.
	 * 
	 * 
	 * @author yasha
	 * @param args
	 *            command line arguments
	 * @throws ParseException
	 * @throws IOException
	 */

	@SuppressWarnings("static-access")
	public final static void main(String[] args) throws IOException, ParseException {
		System.out.println("taschd v0: The TA Scheduler.  http://taschd.cis.udel.edu");
		// int count = args.length;

		UserInterface ui = new UserInterface();
		// for (int i = 0; i < count; i++)
		switch (args[0]) {
		case "init":
			System.out.println("The directory structure has now been created\n");
			ui.init();
			break;

		case "addterm":
			// args[1] = term (Ex. 2188)
			System.out.println("The term " + args[1] + " has been added\n");
			ui.addTerm(args[1]);
			break;

		case "addcourse":
			// String source = args[1] (Ex: Web)
			// String courseKey = args[2] (Ex: CISC675)
			// String term = args[3] (Ex: 2188)
			ui.getCourseFromWebReg(args[1], args[2], args[3]);
			break;

//		case "getcrsschd":
//			// args[1] = String source (Ex: web)
//			// args[2] = String courseKey (Ex: CISC675)
//			// args[3] = String term (Ex: 2188)
//			// TODO Get this command line working. It should not save as a file.
//			// TODO Just needs to display the schedules
//			// TODO Handle it for up to five courseKeys (make term as args[2])
//			ui.getCourseSchd(args[1], args[2], args[3]);
//			break;

		case "getcoursebycode":
			// TODO does not display
			// String prefix = args[1] (Ex:CISC)
			// String code = args[2] (Ex:675)
			// String term = args[3] (Ex: 2188)
			ui.getCourseByCodeFromDatabase(args[1], args[2], Integer.parseInt(args[3]));
			break;

		case "getcourseschdbycode":

			// TODO does not display
			// String prefix = args[1] (Ex:CISC)
			// String courseCode = args[1] (Ex:675)
			// String term = args[2] (Ex: 2188)

			ui.getCourseSchdByCodeFromDatabase(args[1], args[2], Integer.parseInt(args[3]));
			break;

		case "addca":

			// TODO Extract from udsis
			// String source = args[1]

			// String [] credentials [Username = args[2], Password = args[3]]
			// int caID = args[4] (Ex: 123432)
			// String term = args[5] (Ex: 2188)

			// TODO Fix NullPointer Exception that arises from Database
			// method
			// storeCAToDynamic()
			// and also from UserInterface method storeCAToDatabase
			// int caID = args[1] (Ex: 123432)
			// String term = args[2] (Ex: 2188)

			//int caid = Integer.parseInt(args[]);
			String [] cred = {args[2], args[3]};
			int [] caid = {Integer.parseInt(args[4])};
			ui.getCAFromWebReg(args[1], cred, caid, args[5]);
			break;

		case "getcabyid":
			int StudentID = Integer.parseInt(args[1]);
			ui.getCAbyIDFromDatabase(StudentID, Integer.parseInt(args[2]));
			break;

		case "getcaschdbycaid":
			// args[1] = CAid (Ex: 123432)
			// args[2] = term (Ex: 2188)
			int SID = Integer.parseInt(args[1]);
			ui.getCASchdByIDFromDatabase(SID, Integer.parseInt(args[2]));
			break;

		case "genassign":

			// args[1] = term
			// args[2] = fileName
			// ui.genAssign(args[1]);
			// arg[1] = term

			ui.genAssign(Integer.parseInt(args[1]));

			break;

		case "display -caschd":
			// arg[1] = term
			// arg[2] = caID1, caID2,...
			break;

		case "display -crsschd":
			// arg[1] = term
			// arg[2] = courseKey1, courseKey2,...
			break;

		case "display -assignfile":
			// arg[1] = term
			// arg[2] = fileName...
			break;

		case "display -assign":
			// arg[1] = term
			// arg[2] = caID1
			// arg[3] = fileName

			break;

		}

	}
}
